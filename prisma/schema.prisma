// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   email    String   @unique
//   username String   @unique
//   name     String?
//   hashed_password String
//   // refresh_token String?
//   // access_token String?
//   // id_token String?
//   // session Session[]
//   imageUrl String? @db.String

//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
// }

// model Session {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String @unique
//   expiresAt DateTime
//   userId String @db.ObjectId
//   user User @relation(fields: [userId], references: [id])
// }

model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  username String   @unique
  email    String   @unique
  name     String? @db.String
  hashedPassword String
  imageUrl String? @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contacts        String[] // list of usernames in the user's contacts

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  unreadMessagesIds String[]  @db.ObjectId

  messages Message[]
}


model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  imageUrl String? @db.String

  messagesIds String[]  @db.ObjectId @default([])
  messages    Message[] 

  lastMessage String?
  lastMessageSenderId String? @db.ObjectId
  lastMessageSeenIds String[] @db.ObjectId

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}